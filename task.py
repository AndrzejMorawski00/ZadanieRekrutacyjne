import os
from typing import Dict, Optional
from dotenv import load_dotenv
from openai import OpenAI
from openai.types.chat import ChatCompletionMessageParam, ChatCompletion
from openai.types.chat_model import ChatModel
from bs4 import BeautifulSoup, Tag


CSS_STYLES: str = """

            :root {
                --backgroundColor: #dfdfdf;
                --h1TagColor: #333131;
                --h2TagColor: #1c5f9e;
                --pTagColor: #272424;
                --borderColor: #cccccc;
            }
            * {
                padding: 0;
                margin: 0;
                box-sizing: border-box;
            }
            
            body {
                display: flex;
                justify-content: center;
                max-width: 100vw;
                margin-top: 1rem;
                font-size: 10px;
                font-family: Arial, Helvetica, sans-serif;
                background-color: var(--backgroundColor);
            }
            article {
                width: 100%;
                display: flex;
                flex-direction: column;
                gap: 1rem;
                padding: 0 1rem;
            }
            /* Header */
            header {
                padding-bottom: 0.5rem;
                border-bottom: 1px solid var(--borderColor);
            }

            h1 {
                font-size: 4rem;
                color: var(--h1TagColor);
                letter-spacing: 1px;
                font-weight: 600;
            }
            /* Article Section */

            section {
                display: flex;
                flex-direction: column;
                gap: 1rem;
                padding: 0 1rem 1rem 0;
            }

            h2 {
                font-size: 3.5rem;
                color: var(--h2TagColor);
                font-weight: 500;
            }

            div {
                display: flex;
                align-items: flex-start;
                gap: 1rem;
                
            }

            p {
                font-size: 1.5rem;
                color: var(--pTagColor);
            }

            /* Image */
            figure {
                display: flex;
                flex-direction: column;
                align-items: center;
                width: 40%;
            }

            img {
                width: 100%;
                height: auto;
                max-width: 200px;
            }

            figcaption {
                color: var(--pTagColor);
                text-align: center;
            }
            
            /* Footer */
            footer {
                border-top: 1px solid var(--borderColor);
                padding: 1rem;
            }

            footer > p {
                
                color: var(--pTagColor);
                font-size: 1.2rem;
            }

            @media (min-width: 540px) {
                * {
                    font-size: 12px;
                }
            }

            @media (min-width: 720px) {
                * {
                    font-size: 12px;
                }
            }

            @media (min-width: 1080px) {
                * {
                    font-size: 13px;
                }
            }

            @media (min-width: 1300px) {
                * {
                    font-size: 14px;
                }
            }
"""


AI_ROLE: ChatCompletionMessageParam = {
    "role": "system",
    "content": "You're a web developer assistant who can create a website based on a context provided by a user."
}

AI_MODEL = 'gpt-4o-mini'

GENERATE_ARTICLE_MESSAGE: str = """
                    Based on a Article File Content that I provide, generate an HTML site following these rules:
                    1. Wrap the entire content into <article> tag.
                    2. Use <header> and <h1> tags to mark article title.
                    3. Use <footer> and <p> tag to mark information that this code was generated by an AI.
                    5. Generate 3 sections using <section> tag. 
                    6. Each section which will contain <h2> tag, and <div> tag in which will be placed <p> tag and image.
                    7. Include placeholders for images at suitable points using <img src="image_placeholder.jpg" alt=''>. 8. In the alt attribute provide detailed a description for the image which will be generated using DALL-E.
                    9. Wrap each image into a <figure> tag and under the image place <figcaption> tag which will contain an image description with same as alt value.
                    10. Read any UTF-8 characters correctly from the file and make sure they will be displayed correctly in HTML document. Do not modify file content.
                    11. Return only HTML content without any CSS, JS which will be ready to place inside <body> tags.
                    12. Do not generate additional comments. Return only <article> tag content.
                    13. Include whole Article File Content in the website.
                    14. Generate whole file.
                    15. Image descriptions should be generated in polish.
                    """


GENERATE_TEMPLATE_MESSAGE: str = f"""
                Generate a simple HTML website template which will meet these conditions:
                1. Set site title to 'Article Template'.
                2. Don't generate any content between <body> tags.
                3. Generate pure HTML code. Don't provide any additional messages or modify code I provided.
                4. Inject provided Css Code between <style> tags.
                """

MERGE_TEMPLATE_AND_ARTICLE_MESSAGE: str = f"""
                Inject Article File Content into Template File Content between <body> tags following these rules:
                1. Do not add any extra comments or code. Return only the merged content.
                2. Change only the title to 'Merged Site'.
                """

INPUT_ARTICLE_FILE: str = 'tresc_artykulu.txt'
OUTPUT_TEMPLATE_FILE: str = 'szablon.html'
OUTPUT_ARTICLE_FILE: str = 'artykul.html'
OUTPUT_MERGED_FILE: str = 'podglad.html.'


class Solution:
    def __init__(self) -> None:
        self.client: OpenAI = OpenAI(api_key=os.environ['OPENAI_API_KEY'])

    def process_ai_response(self, response: Optional[str]) -> str:
        if not response:
            return 'Failed To generate a response'
        return response.replace("```html\n", "").replace(
            "```", "")

    def generate_prompt(self, message: str, arguments: Dict[str, str]) -> ChatCompletionMessageParam:
        formatted_arguments: str = 'Here is the file content provided earlier as key-value pairs: \n' if arguments else ''
        for key, value in arguments.items():
            formatted_arguments += f'{key}: {value} \n'
        user_message: ChatCompletionMessageParam = {
            'role': 'user',
            'content': f"""
            {message}
            {formatted_arguments}
            """
        }
        return user_message

    def get_ai_response(self, user_message: ChatCompletionMessageParam) -> Optional[str]:
        completion:  ChatCompletion = self.client.chat.completions.create(
            model=AI_MODEL,
            messages=[
                AI_ROLE,
                user_message
            ],
            temperature=0.6
        )
        return completion.choices[0].message.content

    def generate_article(self, input_file: str,  output_file: str) -> None:
        file_content: str = self.read_data_from_file(input_file)

        user_prompt: ChatCompletionMessageParam = self.generate_prompt(GENERATE_ARTICLE_MESSAGE, {
            'Article File Content': file_content})
        ai_response: Optional[str] = self.get_ai_response(user_prompt)
        processed_data: str = self.process_ai_response(ai_response)
        self.write_data_to_file(processed_data, output_file)

    def generate_template(self, css_code: str, output_file: str) -> None:
        user_prompt: ChatCompletionMessageParam = self.generate_prompt(
            GENERATE_TEMPLATE_MESSAGE, {'CSS Code': css_code})
        ai_response: Optional[str] = self.get_ai_response(user_prompt)
        processed_data: str = self.process_ai_response(ai_response)
        self.write_data_to_file(processed_data, output_file)

    def merge_template_and_article_using_ai(self, template_file: str, article_file: str, output_file: str) -> None:
        template_content: str = self.read_data_from_file(template_file)
        article_content: str = self.read_data_from_file(article_file)
        user_prompt: ChatCompletionMessageParam = self.generate_prompt(MERGE_TEMPLATE_AND_ARTICLE_MESSAGE, {
                                                                       'Template File Content': template_content, 'Article File Content': article_content})
        ai_response: Optional[str] = self.get_ai_response(user_prompt)
        processed_data: str = self.process_ai_response(ai_response)
        self.write_data_to_file(processed_data, output_file)

    def merge_template_and_article_using_bs4(self, template_file: str, article_file: str, output_file: str) -> None:
        template_content: str = self.read_data_from_file(template_file)
        article_content: str = self.read_data_from_file(article_file)
        soup = BeautifulSoup(template_content, 'html.parser')
        body_tag: Optional[Tag] = soup.body
        title_tag: Optional[Tag] = soup.title
        if not body_tag or not title_tag:
            raise ValueError('Template is Invalid')

        title_tag.string = 'Merged Site'
        body_tag.append(BeautifulSoup(article_content, 'html.parser'))
        result_text = str(soup)
        self.write_data_to_file(result_text, output_file)

    def read_data_from_file(self, file_name: str) -> str:
        if file_name == '':
            raise ValueError('Invalid File Name')

        with open(file_name, mode='r', encoding='utf-8') as file:
            file_content = file.read()
            file.close()
            return file_content

    def write_data_to_file(self, file_content: str, file_name: str) -> None:
        if file_name == '':
            raise ValueError('Invalid File Name')

        with open(file_name, mode='wt', encoding='utf-8') as file:
            file.write(file_content)
            file.close()


INPUT_ARTICLE_FILE: str = 'tresc_artykulu.txt'
OUTPUT_ARTICLE_FILE: str = 'artykul.html'
OUTPUT_TEMPLATE_FILE: str = 'szablon.html'
OUTPUT_MERGED_FILE: str = 'podglad.html.'


if __name__ == '__main__':
    load_dotenv()
    s = Solution()
    s.generate_article(INPUT_ARTICLE_FILE, OUTPUT_ARTICLE_FILE)
    s.generate_template(CSS_STYLES, OUTPUT_TEMPLATE_FILE)
    s.merge_template_and_article_using_bs4(
        OUTPUT_TEMPLATE_FILE, OUTPUT_ARTICLE_FILE, OUTPUT_MERGED_FILE)
