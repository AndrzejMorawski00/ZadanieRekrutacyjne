import os
from typing import Optional
from dotenv import load_dotenv
from openai import OpenAI

INPUT_ARTICLE_FILE = 'tresc_artykulu.txt'
OUTPUT_ARTICLE_FILE= 'artykul.html'


class Solution:
    def __init__(self, input_file: str, output_file: str) -> None:
        self.file_content: str = ''
        self.input_file: str = input_file
        self.output_file: str = output_file
        self.client: OpenAI = OpenAI(api_key=os.environ['OPENAI_API_KEY'])

    def generate_article(self) -> None:
        self.read_from_file(self.input_file)
        completion = self.client.chat.completions.create(
            model='gpt-3.5-turbo',
            messages=[
                {
                    "role": "system",
                    "content": "You're a web developer assistant who can create a website based on a context provided by a user."
                },
                {
                    "role": "user",
                    "content": f"""
                    Based on a text file's content that I provide, generate an HTML site following these rules:
                    1. Wrap the entire content into <article> tag.
                    2. Use <header> and <h1> tags to mark article title
                    3. Use <footer> tag to mark information that this code was generated by an AI.
                    4. In each section of the article use <section> tag. For better organization use <h2> and <p> tags
                    5. Include placeholders for images at suitable points using <img src="image_placeholder.jpg" alt=''>. In the alt attribute provide a description  for the image which will be generated using DALL-E.
                    6.  Wrap each image into a container and under the image place <figcaption> tag which will contain an image description.
                    7. Read any UTF-8 characters correctly from the file and make sure they will be displayed correctly in HTML document.
                    8. Return only HTML content without any CSS, JS which will be ready to place inside <body> tags.
                    9. Avoid generating additional comments, as the code should be ready for direct insertion into the site without further modification.
                    The content from the text file is as follows: {self.file_content}
                    """
                }]
        )
        response: Optional[str] = completion.choices[0].message.content
        file_content = response.replace("```html\n", "").replace("```", "") if response else 'Failed To Generate a Response'
        self.write_to_file(file_content, self.output_file)

    def read_from_file(self, file_name: str) -> None:
        if file_name == '':
            raise ValueError('Invalid File Name')

        with open(file_name, encoding='utf-8') as file:
            self.file_content = file.read()
            file.close()

    def write_to_file(self, file_content: str, file_name: str) -> None:
        if file_name == '':
            raise ValueError('Invalid File Name')

        with open(file_name, 'wt', encoding='utf-8') as file:
            file.write(file_content)
            file.close()


if __name__ == '__main__':
    load_dotenv()
    s = Solution(INPUT_ARTICLE_FILE, OUTPUT_ARTICLE_FILE)
    s.generate_article()
