import os
from typing import Optional
from dotenv import load_dotenv
from openai import OpenAI
from bs4 import BeautifulSoup, Tag

INPUT_ARTICLE_FILE = 'tresc_artykulu.txt'
OUTPUT_ARTICLE_FILE = 'artykul.html'

CSS_STYLES = """

            :root {
                --backgroundColor: #dfdfdf;
                --h1TagColor: #333131;
                --h2TagColor: #1c5f9e;
                --pTagColor: #272424;
                --borderColor: #cccccc;
            }
            * {
                padding: 0;
                margin: 0;
                box-sizing: border-box;
            }
            
            body {
                display: flex;
                justify-content: center;
                max-width: 100vw;
                margin-top: 1rem;
                font-size: 10px;
                font-family: Arial, Helvetica, sans-serif;
                background-color: var(--backgroundColor);
            }
            article {
                width: 100%;
                display: flex;
                flex-direction: column;
                gap: 1rem;
                padding: 0 1rem;
            }
            /* Header */
            header {
                padding-bottom: 0.5rem;
                border-bottom: 1px solid var(--borderColor);
            }

            h1 {
                font-size: 4rem;
                color: var(--h1TagColor);
                letter-spacing: 1px;
                font-weight: 600;
            }
            /* Article Section */

            section {
                display: flex;
                flex-direction: column;
                gap: 1rem;
                padding: 0 1rem 1rem 0;
            }

            h2 {
                font-size: 3.5rem;
                color: var(--h2TagColor);
                font-weight: 500;
            }

            div {
                display: flex;
                align-items: flex-start;
                gap: 1rem;
                
            }

            p {
                font-size: 1.5rem;
                color: var(--pTagColor);
            }

            /* Image */
            figure {
                display: flex;
                flex-direction: column;
                align-items: center;
                width: 40%;
            }

            img {
                width: 100%;
                height: auto;
                max-width: 200px;
            }

            figcaption {
                color: var(--pTagColor);
                text-align: center;
            }
            
            /* Footer */
            footer {
                border-top: 1px solid var(--borderColor);
                padding: 1rem;
            }

            footer > p {
                
                color: var(--pTagColor);
                font-size: 1.2rem;
            }

            @media (min-width: 540px) {
                * {
                    font-size: 12px;
                }
            }

            @media (min-width: 720px) {
                * {
                    font-size: 12px;
                }
            }

            @media (min-width: 1080px) {
                * {
                    font-size: 13px;
                }
            }

            @media (min-width: 1300px) {
                * {
                    font-size: 14px;
                }
            }
"""


class Solution:
    def __init__(self, input_file: str, output_file: str) -> None:
        self.file_content: str = ''
        self.input_file: str = input_file
        self.output_file: str = output_file
        self.client: OpenAI = OpenAI(api_key=os.environ['OPENAI_API_KEY'])

    def generate_article(self) -> None:
        self.read_from_file(self.input_file)
        completion = self.client.chat.completions.create(
            model='gpt-3.5-turbo',
            messages=[
                {
                    "role": "system",
                    "content": "You're a web developer assistant who can create a website based on a context provided by a user."
                },
                {
                    "role": "user",
                    "content": f"""
                    Based on a text file's content that I provide, generate an HTML site following these rules:
                    1. Wrap the entire content into <article> tag.
                    2. Use <header> and <h1> tags to mark article title
                    3. Use <footer> and <p> tag to mark information that this code was generated by an AI.
                    4. In each section of the article use <section> tag. For better organization use <h2> and <p> tags
                    5. In each section place <p> and <img> tags in one container.
                    5. Include placeholders for images at suitable points using <img src="image_placeholder.jpg" alt=''>. In the alt attribute provide a description  for the image which will be generated using DALL-E.
                    6. Wrap each image into a new container and under the image place <figcaption> tag which will contain an image description the same as alt value.
                    7. Read any UTF-8 characters correctly from the file and make sure they will be displayed correctly in HTML document. Do not modify file content.
                    8. Return only HTML content without any CSS, JS which will be ready to place inside <body> tags.
                    9. Avoid generating additional comments, as the code should be ready for direct insertion into the site without further modification.
                    The content from the text file is as follows: {self.file_content}
                    """
                }]
        )
        response: Optional[str] = completion.choices[0].message.content
        file_content = response.replace("```html\n", "").replace(
            "```", "") if response else 'Failed To Generate a Response'
        self.write_to_file(file_content, self.output_file)

    def generate_template(self, css_code: str) -> None:
        completion = self.client.chat.completions.create(model='gpt-3.5-turbo', messages=[
            {
                "role": "system",
                "content": "You're a web developer assistant who can create a website based on a context provided by a user."
            },
            {
                'role': 'user',
                'content': f"""
                Generate a simple HTML website template which will meet these conditions:
                1. Set site title to {'Article Template'}.
                2. Don't generate any content between <body> tags.
                3. Generate pure HTML code. Don't provide any additional messages or modify code I provided.
                4. Inject styles that I provide into <style> tags.
                CSS Styles provided by me: {css_code}
                """
            }
        ])
        response: Optional[str] = completion.choices[0].message.content
        file_content = response.replace("```html\n", "").replace(
            "```", "") if response else 'Failed To Generate a Response'
        self.write_to_file(file_content, 'template.html')

    def merge_template_and_article_using_ai(self, template: str, article: str, target: str) -> None:
        template_content = self.read_from_file(template)
        article_content = self.read_from_file(article)

        completion = self.client.chat.completions.create(model='gpt-3.5-turbo', messages=[
            {
                "role": "system",
                "content": "You're a web developer assistant who can create a website based on a context provided by a user."
            },
            {
                'role': 'user',
                'content': f"""
                Inject article content into template between <body> tags.
                Don't generate any additional comments or code return merged file.
                The only change I want is change title to 'Merged Site'
                Template: {template_content}
                Artice: {article_content}
                """
            }
        ])
        response: Optional[str] = completion.choices[0].message.content
        file_content = response.replace("```html\n", "").replace(
            "```", "") if response else 'Failed To Generate a Response'
        self.write_to_file(file_content, target)

    def merge_template_and_article_using_bs4(self, template: str, article: str, target: str) -> None:
        template_content = self.read_from_file(template)
        article_content = self.read_from_file(article)
        soup = BeautifulSoup(template_content, 'html.parser')
        body_tag: Optional[Tag] = soup.body
        title_tag : Optional[Tag] = soup.title
        if not body_tag or not title_tag:
            raise ValueError('Templae is Invalid')

        title_tag.string = 'Merged Site'
        body_tag.append(BeautifulSoup(article_content, 'html.parser'))
        # body_tag.append(article_content)
        
        result_text = str(soup)
        self.write_to_file(result_text, target)

    def read_from_file(self, file_name: str) -> str:
        if file_name == '':
            raise ValueError('Invalid File Name')

        with open(file_name, encoding='utf-8') as file:
            file_content = file.read()
            file.close()
            return file_content

    def write_to_file(self, file_content: str, file_name: str) -> None:
        if file_name == '':
            raise ValueError('Invalid File Name')

        with open(file_name, 'wt', encoding='utf-8') as file:
            file.write(file_content)
            file.close()


if __name__ == '__main__':
    load_dotenv()
    s = Solution(INPUT_ARTICLE_FILE, OUTPUT_ARTICLE_FILE)
    # s.generate_article()
    # s.generate_template(CSS_STYLES)
    # s.merge_template_and_article_using_ai('template.html', 'artykul.html', 'merged.html')
    s.merge_template_and_article_using_bs4(
        'template.html', 'artykul.html', 'merged1.html')
